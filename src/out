============================= test session starts ==============================
platform darwin -- Python 3.9.12, pytest-6.2.5, py-1.11.0, pluggy-1.0.0
rootdir: /Users/josh/dev/cards/src
collected 24 items

model/test_action.py .....                                               [ 20%]
model/test_deck.py Card("3", "Clubs")
.Card("7", "Spades")
...                                                  [ 37%]
model/test_hand.py ........                                              [ 70%]
model/test_holdem_round.py delt Josh to Card("2", "Spades")
delt Madi to Card("4", "Hearts")
delt Cody to Card("8", "Hearts")
delt Michelle to Card("2", "Hearts")
delt Sophia to Card("9", "Spades")
delt Beezie to Card("A", "Clubs")
delt Josh to Card("7", "Hearts")
delt Madi to Card("K", "Clubs")
delt Cody to Card("J", "Clubs")
delt Michelle to Card("6", "Diamonds")
delt Sophia to Card("3", "Diamonds")
delt Beezie to Card("K", "Spades")
.delt Josh to Card("K", "Diamonds")
delt Madi to Card("10", "Spades")
delt Cody to Card("10", "Clubs")
delt Michelle to Card("2", "Clubs")
delt Sophia to Card("4", "Clubs")
delt Beezie to Card("9", "Diamonds")
delt Josh to Card("7", "Diamonds")
delt Madi to Card("3", "Diamonds")
delt Cody to Card("A", "Clubs")
delt Michelle to Card("Q", "Hearts")
delt Sophia to Card("7", "Spades")
delt Beezie to Card("2", "Spades")
Starting betting round
initializing holdem_round.is_called = False
Active Player Index: 1
Betting - Active Player: Madi
The bet is 2 to Madi
Play - Madi: CALL
Got action: Action(CALL, 2)
handing action: Action(CALL, 2)
Processing Action - Madi: CALL
Madi calls...have all players bet?
Active Player Index: 2
Betting - Active Player: Cody
The bet is 2 to Cody
Play - Cody: FOLD
Got action: Action(FOLD, None)
handing action: Action(FOLD, None)
Processing Action - Cody: FOLD
Cody: FOLD
Cody folds
Active Player Index: 3
Betting - Active Player: Michelle
The bet is 2 to Michelle
Play - Michelle: CALL
Got action: Action(CALL, 2)
handing action: Action(CALL, 2)
Processing Action - Michelle: CALL
Michelle calls...have all players bet?
Active Player Index: 4
Betting - Active Player: Sophia
The bet is 2 to Sophia
Play - Sophia: CALL
Got action: Action(CALL, 2)
handing action: Action(CALL, 2)
Processing Action - Sophia: CALL
Sophia calls...have all players bet?
Active Player Index: 5
Betting - Active Player: Beezie
The bet is 2 to Beezie
Play - Beezie: FOLD
Got action: Action(FOLD, None)
handing action: Action(FOLD, None)
Processing Action - Beezie: FOLD
Beezie: FOLD
Beezie folds
Active Player Index: 0
Betting - Active Player: Josh
The bet is 2 to Josh
Play - Josh: RAISE
Got action: Action(RAISE, 89)
handing action: Action(RAISE, 89)
Processing Action - Josh: RAISE
Josh raises
Active Player Index: 1
Betting - Active Player: Madi
The bet is 89 to Madi
Play - Madi: CALL
Got action: Action(CALL, 89)
handing action: Action(CALL, 89)
Processing Action - Madi: CALL
Madi calls...have all players bet?
All players have bet, setting holdem_round.is_called = True
Betting is called...settling up with  remaining players
Players still in: ['Josh', 'Madi', 'Michelle', 'Sophia']
Round is called. Match or Fold to Cody
Round is called. Match or Fold to Michelle
Called - Active Player: Michelle
Play - Michelle: MATCH
handing action: Action(MATCH, 89)
Processing Action - Michelle: MATCH
Fdelt Josh to Card("7", "Hearts")
delt Madi to Card("Q", "Spades")
delt Cody to Card("7", "Clubs")
delt Michelle to Card("K", "Clubs")
delt Sophia to Card("7", "Diamonds")
delt Beezie to Card("2", "Spades")
delt Josh to Card("5", "Spades")
delt Madi to Card("4", "Hearts")
delt Cody to Card("10", "Clubs")
delt Michelle to Card("K", "Spades")
delt Sophia to Card("10", "Spades")
delt Beezie to Card("J", "Clubs")
Starting betting round
initializing holdem_round.is_called = False
Active Player Index: 1
Betting - Active Player: Madi
The bet is 2 to Madi
Play - Madi: CALL
Got action: Action(CALL, 2)
handing action: Action(CALL, 2)
Processing Action - Madi: CALL
Madi calls...have all players bet?
Active Player Index: 2
Betting - Active Player: Cody
The bet is 2 to Cody
Play - Cody: FOLD
Got action: Action(FOLD, None)
handing action: Action(FOLD, None)
Processing Action - Cody: FOLD
Cody: FOLD
Cody folds
Active Player Index: 3
Betting - Active Player: Michelle
The bet is 2 to Michelle
Play - Michelle: CALL
Got action: Action(CALL, 2)
handing action: Action(CALL, 2)
Processing Action - Michelle: CALL
Michelle calls...have all players bet?
Active Player Index: 4
Betting - Active Player: Sophia
The bet is 2 to Sophia
Play - Sophia: CALL
Got action: Action(CALL, 2)
handing action: Action(CALL, 2)
Processing Action - Sophia: CALL
Sophia calls...have all players bet?
Active Player Index: 5
Betting - Active Player: Beezie
The bet is 2 to Beezie
Play - Beezie: FOLD
Got action: Action(FOLD, None)
handing action: Action(FOLD, None)
Processing Action - Beezie: FOLD
Beezie: FOLD
Beezie folds
Active Player Index: 0
Betting - Active Player: Josh
The bet is 2 to Josh
Play - Josh: RAISE
Got action: Action(RAISE, 9)
handing action: Action(RAISE, 9)
Processing Action - Josh: RAISE
Josh raises
Active Player Index: 1
Betting - Active Player: Madi
The bet is 9 to Madi
Play - Madi: CALL
Got action: Action(CALL, 9)
handing action: Action(CALL, 9)
Processing Action - Madi: CALL
Madi calls...have all players bet?
All players have bet, setting holdem_round.is_called = True
Betting is called...settling up with  remaining players
Players still in: ['Josh', 'Madi', 'Michelle', 'Sophia']
Round is called. Match or Fold to Cody
Round is called. Match or Fold to Michelle
Called - Active Player: Michelle
Play - Michelle: MATCH
handing action: Action(MATCH, 9)
Processing Action - Michelle: MATCH
F                                           [ 83%]
model/test_player.py delt Josh to Card("A", "Hearts")
delt Josh to Card("J", "Clubs")
.                                                   [ 87%]
model/test_table.py ...                                                  [100%]

=================================== FAILURES ===================================
__________________________________ test_play ___________________________________

    def test_play():
>       round_2.play()

model/test_holdem_round.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
model/holdem_round.py:226: in play
    self.do_betting_round()
model/holdem_round.py:174: in do_betting_round
    self.handle_action(action, active_player)
model/holdem_round.py:58: in handle_action
    active_player.process_action(action)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <players.robby_random.Robby object at 0x10fac6280>
action = <model.action.Action object at 0x10facea90>

    def process_action(self, action):
        print(f"Processing Action - {self.name}: {action.action_type}")
        self.status.has_bet = True
        if action.action_type == FOLD:
            print(f"{self.name}: {action.action_type}")
            #self.status["folded"] = True # deprecate
            self.status.folded = True
            return { "cash": 0 }
        elif action.action_type in [ RAISE, CALL ]:
            cash_into_pot = action.amount - self.status.money_on_table # leaky abstraction need to refactor
            self.bankroll -= cash_into_pot
            self.status.money_on_table = self.status.money_on_table + action.amount # leaky abstraction refactor
            return { "cash": cash_into_pot }
        elif action.action_type == CHECK:
            return {"cash": 0}
        else:
>           raise Exception(f"Invalid action type: {action.action_type}")
E           Exception: Invalid action type: MATCH

model/player.py:58: Exception
----------------------------- Captured stdout call -----------------------------
delt Josh to Card("K", "Diamonds")
delt Madi to Card("10", "Spades")
delt Cody to Card("10", "Clubs")
delt Michelle to Card("2", "Clubs")
delt Sophia to Card("4", "Clubs")
delt Beezie to Card("9", "Diamonds")
delt Josh to Card("7", "Diamonds")
delt Madi to Card("3", "Diamonds")
delt Cody to Card("A", "Clubs")
delt Michelle to Card("Q", "Hearts")
delt Sophia to Card("7", "Spades")
delt Beezie to Card("2", "Spades")
Starting betting round
initializing holdem_round.is_called = False
Active Player Index: 1
Betting - Active Player: Madi
The bet is 2 to Madi
Play - Madi: CALL
Got action: Action(CALL, 2)
handing action: Action(CALL, 2)
Processing Action - Madi: CALL
Madi calls...have all players bet?
Active Player Index: 2
Betting - Active Player: Cody
The bet is 2 to Cody
Play - Cody: FOLD
Got action: Action(FOLD, None)
handing action: Action(FOLD, None)
Processing Action - Cody: FOLD
Cody: FOLD
Cody folds
Active Player Index: 3
Betting - Active Player: Michelle
The bet is 2 to Michelle
Play - Michelle: CALL
Got action: Action(CALL, 2)
handing action: Action(CALL, 2)
Processing Action - Michelle: CALL
Michelle calls...have all players bet?
Active Player Index: 4
Betting - Active Player: Sophia
The bet is 2 to Sophia
Play - Sophia: CALL
Got action: Action(CALL, 2)
handing action: Action(CALL, 2)
Processing Action - Sophia: CALL
Sophia calls...have all players bet?
Active Player Index: 5
Betting - Active Player: Beezie
The bet is 2 to Beezie
Play - Beezie: FOLD
Got action: Action(FOLD, None)
handing action: Action(FOLD, None)
Processing Action - Beezie: FOLD
Beezie: FOLD
Beezie folds
Active Player Index: 0
Betting - Active Player: Josh
The bet is 2 to Josh
Play - Josh: RAISE
Got action: Action(RAISE, 89)
handing action: Action(RAISE, 89)
Processing Action - Josh: RAISE
Josh raises
Active Player Index: 1
Betting - Active Player: Madi
The bet is 89 to Madi
Play - Madi: CALL
Got action: Action(CALL, 89)
handing action: Action(CALL, 89)
Processing Action - Madi: CALL
Madi calls...have all players bet?
All players have bet, setting holdem_round.is_called = True
Betting is called...settling up with  remaining players
Players still in: ['Josh', 'Madi', 'Michelle', 'Sophia']
Round is called. Match or Fold to Cody
Round is called. Match or Fold to Michelle
Called - Active Player: Michelle
Play - Michelle: MATCH
handing action: Action(MATCH, 89)
Processing Action - Michelle: MATCH
______________________________ test_play_detailed ______________________________

    def test_play_detailed():
        for player in players:
            player.start_holdem_round()
        round_3.deal()
        assert round_3.table.flop is None
>       round_3.do_betting_round()

model/test_holdem_round.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
model/holdem_round.py:174: in do_betting_round
    self.handle_action(action, active_player)
model/holdem_round.py:58: in handle_action
    active_player.process_action(action)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <players.robby_random.Robby object at 0x10fac6280>
action = <model.action.Action object at 0x10fb038e0>

    def process_action(self, action):
        print(f"Processing Action - {self.name}: {action.action_type}")
        self.status.has_bet = True
        if action.action_type == FOLD:
            print(f"{self.name}: {action.action_type}")
            #self.status["folded"] = True # deprecate
            self.status.folded = True
            return { "cash": 0 }
        elif action.action_type in [ RAISE, CALL ]:
            cash_into_pot = action.amount - self.status.money_on_table # leaky abstraction need to refactor
            self.bankroll -= cash_into_pot
            self.status.money_on_table = self.status.money_on_table + action.amount # leaky abstraction refactor
            return { "cash": cash_into_pot }
        elif action.action_type == CHECK:
            return {"cash": 0}
        else:
>           raise Exception(f"Invalid action type: {action.action_type}")
E           Exception: Invalid action type: MATCH

model/player.py:58: Exception
----------------------------- Captured stdout call -----------------------------
delt Josh to Card("7", "Hearts")
delt Madi to Card("Q", "Spades")
delt Cody to Card("7", "Clubs")
delt Michelle to Card("K", "Clubs")
delt Sophia to Card("7", "Diamonds")
delt Beezie to Card("2", "Spades")
delt Josh to Card("5", "Spades")
delt Madi to Card("4", "Hearts")
delt Cody to Card("10", "Clubs")
delt Michelle to Card("K", "Spades")
delt Sophia to Card("10", "Spades")
delt Beezie to Card("J", "Clubs")
Starting betting round
initializing holdem_round.is_called = False
Active Player Index: 1
Betting - Active Player: Madi
The bet is 2 to Madi
Play - Madi: CALL
Got action: Action(CALL, 2)
handing action: Action(CALL, 2)
Processing Action - Madi: CALL
Madi calls...have all players bet?
Active Player Index: 2
Betting - Active Player: Cody
The bet is 2 to Cody
Play - Cody: FOLD
Got action: Action(FOLD, None)
handing action: Action(FOLD, None)
Processing Action - Cody: FOLD
Cody: FOLD
Cody folds
Active Player Index: 3
Betting - Active Player: Michelle
The bet is 2 to Michelle
Play - Michelle: CALL
Got action: Action(CALL, 2)
handing action: Action(CALL, 2)
Processing Action - Michelle: CALL
Michelle calls...have all players bet?
Active Player Index: 4
Betting - Active Player: Sophia
The bet is 2 to Sophia
Play - Sophia: CALL
Got action: Action(CALL, 2)
handing action: Action(CALL, 2)
Processing Action - Sophia: CALL
Sophia calls...have all players bet?
Active Player Index: 5
Betting - Active Player: Beezie
The bet is 2 to Beezie
Play - Beezie: FOLD
Got action: Action(FOLD, None)
handing action: Action(FOLD, None)
Processing Action - Beezie: FOLD
Beezie: FOLD
Beezie folds
Active Player Index: 0
Betting - Active Player: Josh
The bet is 2 to Josh
Play - Josh: RAISE
Got action: Action(RAISE, 9)
handing action: Action(RAISE, 9)
Processing Action - Josh: RAISE
Josh raises
Active Player Index: 1
Betting - Active Player: Madi
The bet is 9 to Madi
Play - Madi: CALL
Got action: Action(CALL, 9)
handing action: Action(CALL, 9)
Processing Action - Madi: CALL
Madi calls...have all players bet?
All players have bet, setting holdem_round.is_called = True
Betting is called...settling up with  remaining players
Players still in: ['Josh', 'Madi', 'Michelle', 'Sophia']
Round is called. Match or Fold to Cody
Round is called. Match or Fold to Michelle
Called - Active Player: Michelle
Play - Michelle: MATCH
handing action: Action(MATCH, 9)
Processing Action - Michelle: MATCH
=========================== short test summary info ============================
FAILED model/test_holdem_round.py::test_play - Exception: Invalid action type...
FAILED model/test_holdem_round.py::test_play_detailed - Exception: Invalid ac...
========================= 2 failed, 22 passed in 0.06s =========================
